// This file is auto-generated by @hey-api/openapi-ts

export type PostAuthRegisterData = {
    body?: {
        username: string;
        password: string;
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type PostAuthRegisterErrors = {
    /**
     * Invalid input or username already exists
     */
    400: {
        error?: string;
    };
};

export type PostAuthRegisterError = PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
    /**
     * User registered successfully
     */
    201: {
        accessToken: string;
        refreshToken: string;
        user: {
            username: string;
            email: string;
        };
    };
};

export type PostAuthRegisterResponse = PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthLoginData = {
    body?: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginErrors = {
    /**
     * Invalid credentials
     */
    401: {
        error?: string;
    };
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
    /**
     * User logged in successfully
     */
    200: {
        accessToken: string;
        refreshToken: string;
        user: {
            username: string;
            email: string;
        };
    };
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type GetAuthGithubData = {
    body?: never;
    path?: never;
    query: {
        redirect_uri: string;
    };
    url: '/auth/github';
};

export type GetAuthGithubResponses = {
    /**
     * GitHub authorize URL
     */
    200: {
        url: string;
    };
};

export type GetAuthGithubResponse = GetAuthGithubResponses[keyof GetAuthGithubResponses];

export type GetAuthGithubCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        state: string;
        redirect_uri: string;
    };
    url: '/auth/github/callback';
};

export type GetAuthGithubCallbackErrors = {
    /**
     * Invalid state or code
     */
    400: {
        error?: string;
    };
};

export type GetAuthGithubCallbackError = GetAuthGithubCallbackErrors[keyof GetAuthGithubCallbackErrors];

export type GetAuthGithubCallbackResponses = {
    /**
     * GitHub OAuth callback successful
     */
    200: {
        accessToken: string;
        refreshToken: string;
        user: {
            username: string;
            email: string;
        };
    };
};

export type GetAuthGithubCallbackResponse = GetAuthGithubCallbackResponses[keyof GetAuthGithubCallbackResponses];

export type PostAuthRefreshData = {
    body?: {
        refreshToken: string;
    };
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type PostAuthRefreshErrors = {
    /**
     * Invalid refresh token
     */
    401: {
        error?: string;
    };
};

export type PostAuthRefreshError = PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
    /**
     * New access token generated
     */
    200: {
        accessToken: string;
        refreshToken: string;
        user: {
            username: string;
            email: string;
        };
    };
};

export type PostAuthRefreshResponse = PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type PostAuthLogoutResponses = {
    /**
     * Logout successful
     */
    200: {
        message: string;
    };
};

export type PostAuthLogoutResponse = PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type GetReportEntriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/report-entries';
};

export type GetReportEntriesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetReportEntriesResponses = {
    /**
     * Get all report entries of current user
     */
    200: {
        reportEntries: Array<{
            _id: unknown;
            ownerId: unknown;
            date: string;
            time: {
                start: string;
                end: string;
            };
            duration: number;
            project: string;
            activity: string | null;
            description: string;
            createdAt: string;
            updatedAt: string;
        }>;
        email: string;
    };
};

export type GetReportEntriesResponse = GetReportEntriesResponses[keyof GetReportEntriesResponses];

export type PostReportEntriesData = {
    body: {
        date: string;
        time: {
            start: string;
            end: string;
        };
        duration: number;
        project: string;
        activity: string | null;
        description: string;
    };
    path?: never;
    query?: never;
    url: '/report-entries';
};

export type PostReportEntriesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type PostReportEntriesResponses = {
    /**
     * Create report entry
     */
    201: {
        reportEntry: {
            _id: unknown;
            ownerId: unknown;
            date: string;
            time: {
                start: string;
                end: string;
            };
            duration: number;
            project: string;
            activity: string | null;
            description: string;
            createdAt: string;
            updatedAt: string;
        };
    };
};

export type PostReportEntriesResponse = PostReportEntriesResponses[keyof PostReportEntriesResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3000' | (string & {});
};