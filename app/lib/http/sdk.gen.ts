// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostAuthRegisterData, PostAuthRegisterResponse, PostAuthRegisterError, PostAuthLoginData, PostAuthLoginResponse, PostAuthLoginError, GetAuthGithubData, GetAuthGithubResponse, GetAuthGithubCallbackData, GetAuthGithubCallbackResponse, GetAuthGithubCallbackError, PostAuthRefreshData, PostAuthRefreshResponse, PostAuthRefreshError, PostAuthLogoutData, PostAuthLogoutResponse, GetReportEntriesData, GetReportEntriesResponse, PostReportEntriesData, PostReportEntriesResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponse, PostAuthRegisterError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLoginResponse, PostAuthLoginError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAuthGithub = <ThrowOnError extends boolean = false>(options: Options<GetAuthGithubData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthGithubResponse, unknown, ThrowOnError>({
        url: '/auth/github',
        ...options
    });
};

export const getAuthGithubCallback = <ThrowOnError extends boolean = false>(options: Options<GetAuthGithubCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthGithubCallbackResponse, GetAuthGithubCallbackError, ThrowOnError>({
        url: '/auth/github/callback',
        ...options
    });
};

export const postAuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRefreshResponse, PostAuthRefreshError, ThrowOnError>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLogoutResponse, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

export const getReportEntries = <ThrowOnError extends boolean = false>(options?: Options<GetReportEntriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReportEntriesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/report-entries',
        ...options
    });
};

export const postReportEntries = <ThrowOnError extends boolean = false>(options: Options<PostReportEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportEntriesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/report-entries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};